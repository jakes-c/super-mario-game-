{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAA8B;AACA;AACJ;AACQ;;AAEnB,oBAAoB,+CAAM;AACzC;AACA,uBAAuB,+CAAM;AAC7B;;AAEA;AACA;AACA;AACA,oBAAoB,+CAAM;AAC1B;AACA;;AAEA;AACA,yBAAyB,iDAAQ;AACjC;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,6CAAI;;AAEzB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;ACxC8B;AACA;;AAEf,wBAAwB,+CAAM;AAC7C;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;;;;;;;;;;;;;;;;;ACR8B;AACA;;AAEf,mBAAmB,+CAAM;AACxC;AACA,uBAAuB,+CAAM;AAC7B;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB;AACA;AACA,OAAO;AACP,qBAAqB,+CAAM;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACvDe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACT8B;AACA;;AAEf,qBAAqB,+CAAM;AAC1C;AACA,uBAAuB,+CAAM;AAC7B;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB;AACA;AACA,OAAO;AACP,gBAAgB,+CAAM;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/D8B;AACA;;AAEf,oBAAoB,+CAAM;AACzC;AACA,uBAAuB,+CAAM;AAC7B;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB;AACA;AACA,OAAO;;AAEP;AACA;AACA,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB;AACA;AACA,OAAO;AACP,kBAAkB,+CAAM;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtG8B;AACA;;AAEf,oBAAoB,+CAAM;AACzC;AACA,uBAAuB,+CAAM;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB;AACA;AACA,OAAO;AACP;AACA;AACA,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB;AACA;AACA,OAAO;AACP;AACA;AACA,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB;AACA;AACA,OAAO;AACP;AACA;AACA,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB;AACA;AACA,OAAO;AACP;AACA;AACA,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB;AACA;AACA,OAAO;AACP;AACA;AACA,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB,cAAc,+CAAM;AACpB;AACA;AACA,OAAO;AACP,sBAAsB,+CAAM;AAC5B,qBAAqB,+CAAM;AAC3B,qBAAqB,+CAAM;AAC3B,oBAAoB,+CAAM;;AAE1B,yBAAyB,+CAAM;AAC/B,wBAAwB,+CAAM;AAC9B,wBAAwB,+CAAM;AAC9B,uBAAuB,+CAAM;AAC7B,gBAAgB,+CAAM;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnQ8B;AACA;;AAEf,uBAAuB,+CAAM;AAC5C;AACA,uBAAuB,+CAAM;AAC7B;;AAEA;;AAEA;AACA,kBAAkB,+CAAM;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtC8B;AACA;;AAE9B,qBAAqB,+CAAM;AAC3B;AACA,uBAAuB,+CAAM;AAC7B;AACA;AACA;;AAEA,mBAAmB,+CAAM;AACzB;AACA,uBAAuB,+CAAM;;AAE7B;AACA;AACA;AACA,oBAAoB,+CAAM;AAC1B;AACA,uBAAuB,+CAAM;;AAE7B;AACA;AACA;AACA,oBAAoB,+CAAM;AAC1B;AACA,uBAAuB,+CAAM;;AAE7B;AACA;AACA;;AAEA,uBAAuB,+CAAM;AAC7B;AACA,uBAAuB,+CAAM;;AAE7B;AACA;AACA;;AAEA,yBAAyB,+CAAM;AAC/B;AACA,uBAAuB,+CAAM;;AAE7B;AACA;AACA;;AAEA,0BAA0B,+CAAM;AAChC;AACA,uBAAuB,+CAAM;;AAE7B;AACA;AACA;;AAEA,yBAAyB,+CAAM;AAC/B;AACA,uBAAuB,+CAAM;;AAE7B;AACA;AACA;;AAEA,mBAAmB,+CAAM;AACzB;AACA,uBAAuB,+CAAM;;AAE7B;AACA;AACA;;AAEA,uBAAuB,+CAAM;AAC7B;AACA,uBAAuB,+CAAM;;AAE7B;AACA;AACA;;AAEA,qBAAqB,+CAAM;AAC3B;AACA,uBAAuB,+CAAM;;AAE7B;AACA;AACA;;AAcE;;;;;;;;;;;;;;;ACpGa;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACVe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE+B;;;;;;;;;;;;;;;;;;ACxWgB;AACT;AACQ;;AAE/B;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,qDAAc;AAC1B;AACA,KAAK;;AAEL;AACA;AACA,YAAY,oDAAa;AACzB;AACA,KAAK;;AAEL;AACA;AACA,YAAY,uDAAgB;AAC5B;AACA;AACA,KAAK;;AAEL;AACA;AACA,YAAY,mDAAY;AACxB;AACA,KAAK;;AAEL;AACA;AACA,YAAY,yDAAkB;AAC9B;AACA;AACA,KAAK;;AAEL;AACA;AACA,YAAY,0DAAmB;AAC/B;AACA;AACA,KAAK;;AAEL;AACA;AACA,YAAY,yDAAkB;AAC9B;AACA;AACA,KAAK;;AAEL;AACA;AACA,YAAY,uDAAK;AACjB;AACA,KAAK;;AAEL;AACA;AACA,YAAY,uDAAK;AACjB;AACA,KAAK;;AAEL;AACA;AACA,YAAY,2DAAS;AACrB;AACA,KAAK;;AAEL;AACA;AACA,YAAY,oDAAa;AACzB,KAAK;;AAEL;AACA,UAAU,mDAAY;AACtB;;AAEA;AACA,UAAU,uDAAgB;AAC1B;AACA;;AAEA;AACA,UAAU,qDAAc;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7JA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEgC;;;;;;;;;;;;;;;ACtBhC;AACA,UAAU;AACV,aAAa;;AAEb;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;AACH;;AAE4B;;;;;;;;;;;;;;;ACzE5B;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAE+B;;;;;;;;;;;;;;;AClB/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,+BAA+B;AACpE;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,iDAAiD;AACjD,eAAe;AACf,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,UAAU;AACV;AACA;AACA;AACA;AACA,YAAY;AACZ,UAAU;AACV;AACA;AACA;AACA;AACA,YAAY;AACZ,UAAU;AACV;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA,gDAAgD;;AAEhD;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;AACH;;AAE8B;;;;;;;;;;;;;;;ACzY9B;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,8BAA8B,WAAW,EAAE,UAAU;AACrD;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA,GAAG;AACH;;AAE6B;;;;;;;UC9D7B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;ACNmC;AACF;AACQ;AACF;AACF;;AAEM;AACA;;AAEN;AACE;AACF;AACA;;AAErC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wDAAU,CAAC,oDAAQ;AAC3C,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,wBAAwB,uDAAK;AAC7B,wBAAwB,wDAAK;;AAE7B,MAAM,mDAAK;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,oDAAQ;AACd;AACA,cAAc,uDAAK;AACnB,OAAO;;AAEP,MAAM,oDAAQ;AACd;AACA,cAAc,wDAAM;AACpB,OAAO;;AAEP,MAAM,oDAAM;AACZ;AACA,KAAK;AACL;;AAEA;AACA;AACA,MAAM,mDAAK;AACX,MAAM,uDAAS;AACf,MAAM,sDAAQ;AACd,MAAM,qDAAO;;AAEb;AACA,MAAM,oDAAM;;AAEZ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA","sources":["webpack://mario_js/./lib/entities/block.js","webpack://mario_js/./lib/entities/breakable.js","webpack://mario_js/./lib/entities/coin.js","webpack://mario_js/./lib/entities/entity.js","webpack://mario_js/./lib/entities/goomba.js","webpack://mario_js/./lib/entities/koopa.js","webpack://mario_js/./lib/entities/mario.js","webpack://mario_js/./lib/entities/mushroom.js","webpack://mario_js/./lib/entities/scenery.js","webpack://mario_js/./lib/entities/score.js","webpack://mario_js/./lib/entities/sprite.js","webpack://mario_js/./lib/map/level_1-1.js","webpack://mario_js/./lib/map/map_builder.js","webpack://mario_js/./lib/util/animation.js","webpack://mario_js/./lib/util/input.js","webpack://mario_js/./lib/util/movement.js","webpack://mario_js/./lib/util/physics.js","webpack://mario_js/./lib/util/render.js","webpack://mario_js/webpack/bootstrap","webpack://mario_js/webpack/runtime/define property getters","webpack://mario_js/webpack/runtime/hasOwnProperty shorthand","webpack://mario_js/webpack/runtime/make namespace object","webpack://mario_js/./lib/game.js"],"sourcesContent":["import Entity from './entity';\nimport Sprite from './sprite';\nimport Coin from './coin';\nimport Mushroom from './mushroom';\n\nexport default class Block extends Entity {\n  constructor(contents, tileset, xPos, yPos, width, height) {\n    const sprite = new Sprite(tileset, 433, 1, 17, 17);\n    super('block', sprite, xPos, yPos, width, height);\n\n    this.contents = contents;\n    this.coinSound = new Audio('./assets/audio/sounds/coin.wav');\n    this.powerupSpawnSound = new Audio('./assets/audio/sounds/powerup_spawn.wav');\n    this.used = new Sprite(tileset, 486, 0, 18, 18);\n    this.tileset = tileset;\n  }\n\n  createMushroom(data) {\n    const mushroom = new Mushroom(data.spriteSheet, this.xPos, this.yPos - 18, 16, 16);\n    data.entities.mushrooms.push(mushroom);\n    this.powerupSpawnSound.play();\n    this.contents = 'empty';\n  }\n\n  collectCoin(data) {\n    const coin = new Coin(this.tileset, this.xPos - 2, this.yPos - 18, 18, 18);\n\n    data.entities.score.value += 50;\n    data.entities.score.coinCount += 1;\n    this.contents = 'empty';\n    this.coinSound.play();\n\n    coin.currentState = coin.states.blockCoin;\n    data.entities.coins.push(coin);\n\n    setTimeout(() => {\n      const index = data.entities.coins.indexOf(coin);\n      delete data.entities.coins[index];\n    }, 50);\n  }\n}\n","import Entity from './entity';\nimport Sprite from './sprite';\n\nexport default class Breakable extends Entity {\n  constructor(tileset, xPos, yPos, width, height) {\n    const sprite = new Sprite(tileset, 18, 0, 18, 18);\n    super('breakable', sprite, xPos, yPos, width, height);\n  }\n}\n","import Entity from './entity';\nimport Sprite from './sprite';\n\nexport default class Coin extends Entity {\n  constructor(spriteSheet, xPos, yPos, width, height) {\n    const sprite = new Sprite(spriteSheet, 5, 5, 10, 14);\n    super('coin', sprite, xPos, yPos, width, height);\n\n    const self = this;\n    this.type = 'coin';\n    this.coinSound = new Audio('./assets/audio/sounds/coin.wav');\n\n    this.tileset = new Image();\n    this.tileset.src = './assets/sprites/tileset_gutter.png';\n\n    this.spriteAnimations = {\n      spin: {\n        frames: [\n          new Sprite(spriteSheet, 5, 5, 10, 14),\n          new Sprite(spriteSheet, 21, 5, 10, 14),\n          new Sprite(spriteSheet, 37, 5, 10, 14),\n          new Sprite(spriteSheet, 53, 5, 10, 14),\n        ],\n        currentFrame: 0,\n      },\n      blockCoin: new Sprite(this.tileset, 486, 18, 18, 18),\n    };\n\n    this.states = {\n      spinning: {\n        animation(data) {\n          if (data.animationFrame % 13 === 0) {\n            self.sprite =\n              self.spriteAnimations.spin.frames[self.spriteAnimations.spin.currentFrame];\n            self.spriteAnimations.spin.currentFrame += 1;\n\n            if (self.spriteAnimations.spin.currentFrame > 3) {\n              self.spriteAnimations.spin.currentFrame = 0;\n            }\n          }\n        },\n      },\n\n      blockCoin: {\n        animation(data) {\n          self.sprite = self.spriteAnimations.blockCoin;\n        },\n      },\n    };\n    this.currentState = this.states.spinning;\n    this.xPos = xPos;\n    this.yPos = yPos;\n    this.width = width;\n    this.height = height;\n  }\n}\n","export default class Entity {\n  constructor(type, sprite, xPos, yPos, width, height) {\n    this.type = type;\n    this.sprite = sprite;\n    this.xPos = xPos;\n    this.yPos = yPos;\n    this.width = width;\n    this.height = height;\n  }\n}\n","import Entity from './entity';\nimport Sprite from './sprite';\n\nexport default class Goomba extends Entity {\n  constructor(img, xPos, yPos, width, height) {\n    const sprite = new Sprite(img, 115, 5, 16, 16);\n    super('goomba', sprite, xPos, yPos, width, height);\n\n    const self = this;\n    this.squishSound = new Audio('./assets/audio/sounds/stomp.wav');\n\n    this.spriteAnimations = {\n      walking: {\n        frames: [\n          new Sprite(img, 115, 5, 16, 16),\n          new Sprite(img, 131, 5, 16, 16),\n        ],\n        currentFrame: 0,\n      },\n      dead: new Sprite(img, 147.5, 5, 16, 16),\n    };\n\n    this.states = {\n      walking: {\n        movement(data) {\n          if (self.direction === 'left') {\n            self.xPos -= self.velX;\n          } else {\n            self.xPos += self.velX;\n          }\n        },\n        animation(data) {\n          if (data.animationFrame % 10 === 0) {\n            self.sprite = self.spriteAnimations.walking\n              .frames[self.spriteAnimations.walking.currentFrame];\n\n            self.spriteAnimations.walking.currentFrame += 1;\n\n            if (self.spriteAnimations.walking.currentFrame > 1) {\n              self.spriteAnimations.walking.currentFrame = 0;\n            }\n          }\n        },\n      },\n      dead: {\n        movement(data) {\n          self.velX = 0;\n        },\n        animation(data) {\n          self.sprite = self.spriteAnimations.dead;\n        },\n      },\n    };\n\n    this.currentState = this.states.walking;\n    this.direction = 'right';\n    this.velY = 0;\n    this.velX = 0.7;\n    this.xPos = xPos;\n    this.yPos = yPos;\n    this.width = width;\n    this.height = height;\n  }\n}\n","import Entity from './entity';\nimport Sprite from './sprite';\n\nexport default class Koopa extends Entity {\n  constructor(img, xPos, yPos, width, height) {\n    const sprite = new Sprite(img, 253, 29, 16, 24);\n    super('koopa', sprite, xPos, yPos, width, height);\n\n    const self = this;\n    this.squishSound = new Audio('./assets/audio/sounds/stomp.wav');\n\n    this.spriteAnimations = {\n      walkRight: {\n        frames: [\n          new Sprite(img, 253, 29, 16, 24),\n          new Sprite(img, 237, 29, 16, 24),\n        ],\n        currentFrame: 0,\n      },\n\n      walkLeft: {\n        frames: [\n          new Sprite(img, 173, 5, 16, 24),\n          new Sprite(img, 189, 5, 16, 24),\n        ],\n        currentFrame: 0,\n      },\n      hiding: new Sprite(img, 237.5, 14, 16, 15),\n    };\n\n    this.states = {\n      walking: {\n        movement(data) {\n          if (self.direction === 'right') {\n            self.xPos += self.velX;\n          } else {\n            self.xPos -= self.velX;\n          }\n        },\n\n        animation(data) {\n          if (self.direction === 'right') {\n            if (data.animationFrame % 10 === 0) {\n              self.sprite = self.spriteAnimations.walkRight\n                .frames[self.spriteAnimations.walkRight.currentFrame];\n\n              self.spriteAnimations.walkRight.currentFrame += 1;\n\n              if (self.spriteAnimations.walkRight.currentFrame > 1) {\n                self.spriteAnimations.walkRight.currentFrame = 0;\n              }\n            }\n          } else {\n            if (data.animationFrame % 10 === 0) {\n              self.sprite = self.spriteAnimations.walkLeft\n                .frames[self.spriteAnimations.walkLeft.currentFrame];\n              self.spriteAnimations.walkLeft.currentFrame += 1;\n\n              if (self.spriteAnimations.walkLeft.currentFrame > 1) {\n                self.spriteAnimations.walkLeft.currentFrame = 0;\n              }\n            }\n          }\n        },\n      },\n\n      hiding: {\n        movement(data) {\n          self.width = 16;\n          self.height = 17;\n          self.velX = 0;\n        },\n        animation(data) {\n          self.sprite = self.spriteAnimations.hiding;\n        },\n      },\n\n      sliding: {\n        movement(data) {\n          self.velX = 3;\n          if (self.direction === 'right') {\n            self.xPos += self.velX;\n          } else {\n            self.xPos -= self.velX;\n          }\n        },\n\n        animation(data) {\n          self.sprite = self.spriteAnimations.hiding;\n        },\n      },\n    };\n\n    this.currentState = this.states.walking;\n    this.direction = 'right';\n    this.velY = 0;\n    this.velX = 0.5;\n    this.xPos = xPos;\n    this.yPos = yPos;\n    this.width = width;\n    this.height = height;\n  }\n}\n","import Entity from './entity';\nimport Sprite from './sprite';\n\nexport default class Mario extends Entity {\n  constructor(img, xPos, yPos, width, height) {\n    const sprite = new Sprite(img, 651, 5, 16, 16);\n    super('mario', sprite, xPos, yPos, width, height);\n\n    const self = this;\n    this.jumpSound = new Audio('./assets/audio/sounds/jump.wav');\n    this.deathSound = new Audio('./assets/audio/sounds/mario_death.wav');\n    this.bumpSound = new Audio('./assets/audio/sounds/bump.wav');\n    this.powerupSound = new Audio('./assets/audio/sounds/powerup.wav');\n    this.powerdownSound = new Audio('./assets/audio/sounds/powerdown.wav');\n\n    this.spriteAnimations = {\n      walkRight: {\n        frames: [\n          new Sprite(img, 667, 5, 16, 16),\n          new Sprite(img, 683, 5, 16, 16),\n          new Sprite(img, 699, 5, 16, 16),\n        ],\n        currentFrame: 0,\n      },\n      walkLeft: {\n        frames: [\n          new Sprite(img, 844, 21, 16, 16),\n          new Sprite(img, 828, 21, 16, 16),\n          new Sprite(img, 812, 21, 16, 16),\n        ],\n        currentFrame: 0,\n      },\n      bigWalkRight: {\n        frames: [\n          new Sprite(img, 295, 5, 16, 32),\n          new Sprite(img, 311, 5, 16, 32),\n          new Sprite(img, 327, 5, 16, 32),\n        ],\n        currentFrame: 0,\n      },\n      bigWalkLeft: {\n        frames: [\n          new Sprite(img, 583, 37, 16, 32),\n          new Sprite(img, 567, 37, 16, 32),\n          new Sprite(img, 551, 37, 16, 32),\n        ],\n        currentFrame: 0,\n      },\n      resizeRight: {\n        frames: [\n          new Sprite(img, 519, 5, 16, 32),\n          new Sprite(img, 279, 5, 16, 32),\n          new Sprite(img, 519, 5, 16, 32),\n          new Sprite(img, 279, 5, 16, 32),\n        ],\n        currentFrame: 0,\n      },\n      resizeLeft: {\n        frames: [\n          new Sprite(img, 519, 5, 16, 32),\n          new Sprite(img, 279, 5, 16, 32),\n          new Sprite(img, 519, 5, 16, 32),\n          new Sprite(img, 279, 5, 16, 32),\n        ],\n        currentFrame: 0,\n      },\n      standRight: new Sprite(img, 651, 5, 16, 16),\n      standLeft: new Sprite(img, 860, 21, 16, 16),\n      jumpRight: new Sprite(img, 731, 5, 16, 16),\n      jumpLeft: new Sprite(img, 778, 22, 16, 16),\n\n      bigStandRight: new Sprite(img, 278.7, 5, 16, 32),\n      bigStandLeft: new Sprite(img, 599.5, 37, 16, 32),\n      bigJumpRight: new Sprite(img, 359, 5, 16, 32),\n      bigJumpLeft: new Sprite(img, 519, 37, 16, 32),\n      dead: new Sprite(img, 748, 5, 16, 16),\n    };\n\n    this.states = {\n      jumping: {\n        movement(data) {\n          if (self.velY === 1.2) {\n            const jumpSound = self.jumpSound.cloneNode();\n            jumpSound.play();\n            self.velY -= 14;\n          }\n        },\n        animation(data) {\n          if (self.direction === 'right') {\n            self.sprite = self.spriteAnimations.jumpRight;\n          } else {\n            self.sprite = self.spriteAnimations.jumpLeft;\n          }\n        },\n      },\n\n      bigJumping: {\n        movement(data) {\n          if (self.velY === 1.2) {\n            self.jumpSound.play();\n            self.velY -= 14;\n          }\n        },\n        animation(data) {\n          if (self.direction === 'right') {\n            self.sprite = self.spriteAnimations.bigJumpRight;\n          } else {\n            self.sprite = self.spriteAnimations.bigJumpLeft;\n          }\n        },\n      },\n\n      standing: {\n        movement(data) {\n\n        },\n        animation(data) {\n          if (self.direction === 'right') {\n            self.sprite = self.spriteAnimations.standRight;\n          } else {\n            self.sprite = self.spriteAnimations.standLeft;\n          }\n        },\n      },\n\n      bigStanding: {\n        movement(data) {\n\n        },\n        animation(data) {\n          if (self.direction === 'right') {\n            self.sprite = self.spriteAnimations.bigStandRight;\n          } else {\n            self.sprite = self.spriteAnimations.bigStandLeft;\n          }\n        },\n      },\n\n      walking: {\n        movement(data) {\n          if (self.direction === 'right') {\n            self.xPos += self.velX;\n          } else {\n            self.xPos -= self.velX;\n          }\n        },\n\n        animation(data) {\n          if (self.direction === 'right') {\n            if (data.animationFrame % 5 === 0) {\n              self.sprite = self.spriteAnimations.walkRight\n                .frames[self.spriteAnimations.walkRight.currentFrame];\n\n              self.spriteAnimations.walkRight.currentFrame += 1;\n\n              if (self.spriteAnimations.walkRight.currentFrame > 2) {\n                self.spriteAnimations.walkRight.currentFrame = 0;\n              }\n            }\n          } else {\n            if (data.animationFrame % 5 === 0) {\n              self.sprite = self.spriteAnimations.walkLeft\n                .frames[self.spriteAnimations.walkLeft.currentFrame];\n              self.spriteAnimations.walkLeft.currentFrame += 1;\n\n              if (self.spriteAnimations.walkLeft.currentFrame > 2) {\n                self.spriteAnimations.walkLeft.currentFrame = 0;\n              }\n            }\n          }\n        },\n      },\n\n      bigWalking: {\n        movement(data) {\n          if (self.direction === 'right') {\n            self.xPos += self.velX;\n          } else {\n            self.xPos -= self.velX;\n          }\n        },\n\n        animation(data) {\n          if (self.direction === 'right') {\n            if (data.animationFrame % 5 === 0) {\n              self.sprite = self.spriteAnimations.bigWalkRight\n                .frames[self.spriteAnimations.bigWalkRight.currentFrame];\n\n              self.spriteAnimations.bigWalkRight.currentFrame += 1;\n\n              if (self.spriteAnimations.bigWalkRight.currentFrame > 2) {\n                self.spriteAnimations.bigWalkRight.currentFrame = 0;\n              }\n            }\n          } else {\n            if (data.animationFrame % 5 === 0) {\n              self.sprite = self.spriteAnimations.bigWalkLeft\n                .frames[self.spriteAnimations.bigWalkLeft.currentFrame];\n              self.spriteAnimations.bigWalkLeft.currentFrame += 1;\n\n              if (self.spriteAnimations.bigWalkLeft.currentFrame > 2) {\n                self.spriteAnimations.bigWalkLeft.currentFrame = 0;\n              }\n            }\n          }\n        },\n      },\n\n      resizing: {\n        movement(data) {\n\n        },\n        animation(data) {\n          if (self.direction === 'right') {\n            if (data.animationFrame % 5 === 0) {\n              self.sprite = self.spriteAnimations.resizeRight\n                .frames[self.spriteAnimations.resizeRight.currentFrame];\n\n              self.spriteAnimations.resizeRight.currentFrame += 1;\n\n              if (self.spriteAnimations.resizeRight.currentFrame > 3) {\n                self.spriteAnimations.resizeRight.currentFrame = 0;\n              }\n            }\n          } else {\n            if (data.animationFrame % 5 === 0) {\n              self.sprite = self.spriteAnimations.resizeLeft\n                .frames[self.spriteAnimations.resizeLeft.currentFrame];\n              self.spriteAnimations.resizeLeft.currentFrame += 1;\n\n              if (self.spriteAnimations.resizeLeft.currentFrame > 3) {\n                self.spriteAnimations.resizeLeft.currentFrame = 0;\n              }\n            }\n          }\n        },\n      },\n\n      dead: {\n        movement(data) {\n          self.velX = 0;\n        },\n\n        animation(data) {\n          self.sprite = self.spriteAnimations.dead;\n        },\n      },\n    };\n\n    this.currentState = this.states.standing;\n    this.direction = 'right';\n    this.bigMario = false;\n    this.velY = 0;\n    this.velX = 3.8;\n    this.xPos = xPos;\n    this.yPos = yPos;\n    this.width = width;\n    this.height = height;\n  }\n}\n","import Entity from './entity';\nimport Sprite from './sprite';\n\nexport default class Mushroom extends Entity {\n  constructor(img, xPos, yPos, width, height) {\n    const sprite = new Sprite(img, 625, 5, 16, 16);\n    super('mushroom', sprite, xPos, yPos, width, height);\n\n    const self = this;\n\n    this.spriteAnimations = {\n      moving: new Sprite(img, 625, 5, 16, 16),\n    };\n\n    this.states = {\n      moving: {\n        movement(data) {\n          if (self.direction === 'left') {\n            self.xPos -= self.velX;\n          } else {\n            self.xPos += self.velX;\n          }\n        },\n        animation(data) {\n          self.sprite = self.spriteAnimations.moving;\n        },\n      },\n    };\n\n    this.currentState = this.states.moving;\n    this.direction = 'right';\n    this.velY = 0;\n    this.velX = 1.3;\n    this.xPos = xPos;\n    this.yPos = yPos;\n    this.width = width;\n    this.height = height;\n  }\n}\n","import Entity from './entity';\nimport Sprite from './sprite';\n\nclass Ground extends Entity {\n  constructor(tileset, xPos, yPos, width, height) {\n    const sprite = new Sprite(tileset, 0, 0, 16, 16);\n    super('ground', sprite, xPos, yPos, width, height);\n  }\n}\n\nclass Pipe extends Entity {\n  constructor(tileset, xPos, yPos, width, height) {\n    const sprite = new Sprite(tileset, 0, 180, 35, 35);\n\n    super('pipe', sprite, xPos, yPos, width, height);\n  }\n}\nclass Brick extends Entity {\n  constructor(tileset, xPos, yPos, width, height) {\n    const sprite = new Sprite(tileset, 0, 18, 18, 18);\n\n    super('brick', sprite, xPos, yPos, width, height);\n  }\n}\nclass Shrub extends Entity {\n  constructor(tileset, xPos, yPos, width, height) {\n    const sprite = new Sprite(tileset, 198.5, 162.5, 53, 17);\n\n    super('shrub', sprite, xPos, yPos, width, height);\n  }\n}\n\nclass Mountain extends Entity {\n  constructor(tileset, xPos, yPos, width, height) {\n    const sprite = new Sprite(tileset, 0, 0, 90, 39);\n\n    super('mountain', sprite, xPos, yPos, width, height);\n  }\n}\n\nclass SmallCloud extends Entity {\n  constructor(tileset, xPos, yPos, width, height) {\n    const sprite = new Sprite(tileset, 64.5, 0, 33, 24);\n\n    super('cloud', sprite, xPos, yPos, width, height);\n  }\n}\n\nclass MediumCloud extends Entity {\n  constructor(tileset, xPos, yPos, width, height) {\n    const sprite = new Sprite(tileset, 0, 24.5, 48, 24);\n\n    super('cloud', sprite, xPos, yPos, width, height);\n  }\n}\n\nclass LargeCloud extends Entity {\n  constructor(tileset, xPos, yPos, width, height) {\n    const sprite = new Sprite(tileset, 0, 0, 64, 24);\n\n    super('cloud', sprite, xPos, yPos, width, height);\n  }\n}\n\nclass Flag extends Entity {\n  constructor(tileset, xPos, yPos, width, height) {\n    const sprite = new Sprite(tileset, 289, 153, 16, 27);\n\n    super('flag', sprite, xPos, yPos, width, height);\n  }\n}\n\nclass Flagpole extends Entity {\n  constructor(tileset, xPos, yPos, width, height) {\n    const sprite = new Sprite(tileset, 289, 163, 16, 18);\n\n    super('flag', sprite, xPos, yPos, width, height);\n  }\n}\n\nclass Castle extends Entity {\n  constructor(tileset, xPos, yPos, width, height) {\n    const sprite = new Sprite(tileset, 0, 0, 80, 80);\n\n    super('flag', sprite, xPos, yPos, width, height);\n  }\n}\n\nexport {\n  Ground,\n  Pipe,\n  Brick,\n  Shrub,\n  Mountain,\n  SmallCloud,\n  MediumCloud,\n  LargeCloud,\n  Flag,\n  Flagpole,\n  Castle,\n};\n","export default class Score {\n  constructor(xPos, yPos) {\n    this.value = 0;\n    this.coinCount = 0;\n    this.xPos = xPos;\n    this.yPos = yPos;\n    this.size = '12px';\n    this.font = 'PixelEmulator';\n    this.color = 'white';\n  }\n}\n","export default class Sprite {\n  constructor(img, srcX, srcY, srcW, srcH) {\n    this.img = img;\n    this.srcX = srcX;\n    this.srcY = srcY;\n    this.srcW = srcW;\n    this.srcH = srcH;\n  }\n}\n","export const levelOne = {\n\n  flag: [3185, 24, 16, 24],\n  flagpole: [3185, 48, 16, 135],\n  castle: [3263, 112, 80, 80],\n\n  blocks: [\n    [256, 128, 16, 16], [352, 64, 16, 16], [368, 128, 16, 16],\n    [1264, 128, 16, 16], [1520, 64, 16, 16], [1712, 128, 16, 16],\n    [1760, 128, 16, 16], [1808, 128, 16, 16], [2080, 64, 16, 16],\n    [2096, 64, 16, 16], [2736, 128, 16, 16],\n  ],\n\n  goombas: [\n    [512, 176, 16, 16],\n    [672, 176, 16, 16],\n    [832, 176, 16, 16],\n    [2768, 176, 16, 16],\n    [560, 176, 16, 16],\n    [1920, 176, 16, 16],\n  ],\n\n  koopas: [\n    [400, 176, 16, 24],\n    [864, 176, 16, 24],\n    [2352, 176, 16, 24],\n  ],\n\n  smallClouds: [\n    [311, 16, 32, 24],\n    [903, 32, 32, 24],\n    [1080, 16, 32, 24],\n    [1687, 32, 32, 24],\n    [1863, 16, 32, 24],\n    [2455, 32, 32, 24],\n    [2631, 16, 32, 24],\n    [3223, 32, 32, 24],\n  ],\n\n  mediumClouds: [\n    [584, 16, 48, 24],\n    [1368, 16, 48, 24],\n    [2135, 16, 48, 24],\n    [2904, 16, 48, 24],\n  ],\n\n  largeClouds: [\n    [440, 32, 64, 24],\n    [1224, 32, 64, 24],\n    [1992, 32, 64, 24],\n    [2759, 32, 64, 24],\n  ],\n\n  ground: [\n    [-16, 0, 16, 200], [0, 192, 16, 16], [16, 192, 16, 16], [32, 192, 16, 16],\n    [48, 192, 16, 16], [64, 192, 16, 16], [80, 192, 16, 16], [96, 192, 16, 16],\n    [112, 192, 16, 16], [128, 192, 16, 16], [144, 192, 16, 16],\n    [160, 192, 16, 16], [176, 192, 16, 16], [192, 192, 16, 16],\n    [208, 192, 16, 16], [224, 192, 16, 16], [240, 192, 16, 16],\n    [256, 192, 16, 16], [272, 192, 16, 16], [288, 192, 16, 16],\n    [304, 192, 16, 16], [320, 192, 16, 16], [336, 192, 16, 16],\n    [352, 192, 16, 16], [368, 192, 16, 16], [384, 192, 16, 16],\n    [400, 192, 16, 16], [416, 192, 16, 16], [432, 192, 16, 16],\n    [448, 192, 16, 16],\n    [464, 192, 16, 16],\n    [480, 192, 16, 16],\n    [496, 192, 16, 16],\n    [512, 192, 16, 16],\n    [528, 192, 16, 16],\n    [544, 192, 16, 16],\n    [560, 192, 16, 16],\n    [576, 192, 16, 16],\n    [592, 192, 16, 16],\n    [608, 192, 16, 16],\n    [624, 192, 16, 16],\n    [640, 192, 16, 16],\n    [656, 192, 16, 16],\n    [672, 192, 16, 16],\n    [688, 192, 16, 16],\n    [704, 192, 16, 16],\n    [720, 192, 16, 16],\n    [736, 192, 16, 16],\n    [752, 192, 16, 16],\n    [768, 192, 16, 16],\n    [784, 192, 16, 16],\n    [800, 192, 16, 16],\n    [816, 192, 16, 16],\n    [832, 192, 16, 16],\n    [848, 192, 16, 16],\n    [864, 192, 16, 16],\n    [880, 192, 16, 16],\n    [896, 192, 16, 16],\n    [912, 192, 16, 16],\n    [928, 192, 16, 16],\n    [944, 192, 16, 16],\n    [960, 192, 16, 16],\n    [976, 192, 16, 16],\n    [992, 192, 16, 16],\n    [1008, 192, 16, 16],\n    [1024, 192, 16, 16],\n    [1040, 192, 16, 16],\n    [1056, 192, 16, 16],\n    [1072, 192, 16, 16],\n    [1088, 192, 16, 16],\n    [1136, 192, 16, 16],\n    [1152, 192, 16, 16],\n    [1168, 192, 16, 16],\n    [1184, 192, 16, 16],\n    [1200, 192, 16, 16],\n    [1216, 192, 16, 16],\n    [1232, 192, 16, 16],\n    [1248, 192, 16, 16],\n    [1264, 192, 16, 16],\n    [1280, 192, 16, 16],\n    [1296, 192, 16, 16],\n    [1312, 192, 16, 16],\n    [1328, 192, 16, 16],\n    [1344, 192, 16, 16],\n    [1360, 192, 16, 16],\n    [1376, 192, 16, 16],\n    [1392, 192, 16, 16],\n    [1440, 192, 16, 16],\n    [1456, 192, 16, 16],\n    [1472, 192, 16, 16],\n    [1488, 192, 16, 16],\n    [1504, 192, 16, 16],\n    [1520, 192, 16, 16],\n    [1536, 192, 16, 16],\n    [1552, 192, 16, 16],\n    [1568, 192, 16, 16],\n    [1584, 192, 16, 16],\n    [1600, 192, 16, 16],\n    [1616, 192, 16, 16],\n    [1632, 192, 16, 16],\n    [1648, 192, 16, 16],\n    [1664, 192, 16, 16],\n    [1680, 192, 16, 16],\n    [1696, 192, 16, 16],\n    [1712, 192, 16, 16],\n    [1728, 192, 16, 16],\n    [1744, 192, 16, 16],\n    [1760, 192, 16, 16],\n    [1776, 192, 16, 16],\n    [1792, 192, 16, 16],\n    [1808, 192, 16, 16],\n    [1824, 192, 16, 16],\n    [1840, 192, 16, 16],\n    [1856, 192, 16, 16],\n    [1872, 192, 16, 16],\n    [1888, 192, 16, 16],\n    [1904, 192, 16, 16],\n    [1920, 192, 16, 16],\n    [1936, 192, 16, 16],\n    [1952, 192, 16, 16],\n    [1968, 192, 16, 16],\n    [1984, 192, 16, 16],\n    [2000, 192, 16, 16],\n    [2016, 192, 16, 16],\n    [2032, 192, 16, 16],\n    [2048, 192, 16, 16],\n    [2064, 192, 16, 16],\n    [2080, 192, 16, 16],\n    [2096, 192, 16, 16],\n    [2112, 192, 16, 16],\n    [2128, 192, 16, 16],\n    [2144, 192, 16, 16],\n    [2160, 192, 16, 16],\n    [2176, 192, 16, 16],\n    [2192, 192, 16, 16],\n    [2208, 192, 16, 16],\n    [2224, 192, 16, 16],\n    [2240, 192, 16, 16],\n    [2256, 192, 16, 16],\n    [2272, 192, 16, 16],\n    [2288, 192, 16, 16],\n    [2304, 192, 16, 16],\n    [2320, 192, 16, 16],\n    [2336, 192, 16, 16],\n    [2352, 192, 16, 16],\n    [2368, 192, 16, 16],\n    [2384, 192, 16, 16],\n    [2400, 192, 16, 16],\n    [2416, 192, 16, 16],\n    [2432, 192, 16, 16],\n    [2448, 192, 16, 16],\n    [2496, 192, 16, 16],\n    [2512, 192, 16, 16],\n    [2528, 192, 16, 16],\n    [2544, 192, 16, 16],\n    [2560, 192, 16, 16],\n    [2576, 192, 16, 16],\n    [2592, 192, 16, 16],\n    [2608, 192, 16, 16],\n    [2624, 192, 16, 16],\n    [2640, 192, 16, 16],\n    [2656, 192, 16, 16],\n    [2672, 192, 16, 16],\n    [2688, 192, 16, 16],\n    [2704, 192, 16, 16],\n    [2720, 192, 16, 16],\n    [2736, 192, 16, 16],\n    [2752, 192, 16, 16],\n    [2768, 192, 16, 16],\n    [2784, 192, 16, 16],\n    [2800, 192, 16, 16],\n    [2816, 192, 16, 16],\n    [2832, 192, 16, 16],\n    [2848, 192, 16, 16],\n    [2864, 192, 16, 16],\n    [2880, 192, 16, 16],\n    [2896, 192, 16, 16],\n    [2912, 192, 16, 16],\n    [2928, 192, 16, 16],\n    [2944, 192, 16, 16],\n    [2960, 192, 16, 16],\n    [2976, 192, 16, 16],\n    [2992, 192, 16, 16],\n    [3008, 192, 16, 16],\n    [3024, 192, 16, 16],\n    [3040, 192, 16, 16],\n    [3056, 192, 16, 16],\n    [3072, 192, 16, 16],\n    [3088, 192, 16, 16],\n    [3104, 192, 16, 16],\n    [3120, 192, 16, 16],\n    [3136, 192, 16, 16],\n    [3152, 192, 16, 16],\n    [3168, 192, 16, 16],\n    [3184, 192, 16, 16],\n    [3200, 192, 16, 16],\n    [3216, 192, 16, 16],\n    [3232, 192, 16, 16],\n    [3248, 192, 16, 16],\n    [3264, 192, 16, 16],\n    [3280, 192, 16, 16],\n    [3296, 192, 16, 16],\n    [3312, 192, 16, 16],\n    [3328, 192, 16, 16],\n    [3344, 192, 16, 16],\n    [3360, 192, 16, 16],\n    [3376, 192, 16, 16],\n    [3392, 192, 16, 16],\n    [3408, 192, 16, 16],\n    [3424, 192, 16, 16],\n    [3440, 192, 16, 16],\n    [3456, 192, 16, 16],\n    [3472, 192, 16, 16],\n    [3488, 192, 16, 16],\n    [3504, 192, 16, 16],\n    [3520, 192, 16, 16],\n    [3536, 192, 16, 16],\n    [3552, 192, 16, 16],\n    [3568, 192, 16, 16],\n    [3584, 192, 16, 16],\n    [3600, 192, 16, 16],\n    [3616, 192, 16, 16],\n    [3632, 192, 16, 16],\n    [3648, 192, 16, 16],\n    [3664, 192, 16, 16],\n    [3680, 192, 16, 16],\n    [3696, 192, 16, 16],\n    [3712, 192, 16, 16],\n    [3728, 192, 16, 16],\n    [3744, 192, 16, 16],\n    [3760, 192, 16, 16],\n    [3776, 192, 16, 16], [3792, 192, 16, 16],\n    [3808, 192, 16, 16], [3824, 192, 16, 16],\n    [3840, 192, 16, 16], [2208, 128, 16, 64], [2192, 144, 16, 48], [2176, 160, 16, 32],\n    [2256, 128, 16, 64], [2272, 144, 16, 48],\n    [2288, 160, 16, 32], [2304, 176, 16, 16], [2384, 176, 16, 16],\n    [2400, 160, 16, 32], [2416, 144, 16, 48], [2432, 128, 32, 64],\n    [2496, 128, 16, 64], [2512, 144, 16, 48], [2528, 160, 16, 32],\n    [2544, 176, 16, 16], [3024, 64, 32, 128],\n    [46, 3024, 80, 96], [3008, 80, 16, 112], [2992, 96, 16, 96],\n    [2976, 112, 16, 80], [2960, 128, 16, 64], [2944, 144, 16, 48],\n    [2928, 160, 16, 32], [2912, 176, 16, 16],\n  ],\n\n  bricks: [\n    [2160, 176, 16, 16], [2176, 160, 16, 16], [2176, 176, 16, 16],\n    [2192, 144, 16, 16], [2192, 160, 16, 16], [2192, 176, 16, 16],\n    [2208, 128, 16, 16], [2208, 144, 16, 16], [2208, 160, 16, 16],\n    [2208, 176, 16, 16], [2256, 128, 16, 16], [2256, 144, 16, 16],\n    [2256, 160, 16, 16], [2256, 176, 16, 16], [2272, 144, 16, 16],\n    [2272, 160, 16, 16], [2272, 176, 16, 16], [2288, 160, 16, 16],\n    [2288, 176, 16, 16], [2304, 176, 16, 16], [3184, 176, 16, 16],\n\n    [2384, 176, 16, 16],\n    [2400, 160, 16, 16], [2400, 176, 16, 16],\n    [2416, 144, 16, 16], [2416, 160, 16, 16], [2416, 176, 16, 16],\n    [2432, 128, 16, 16], [2432, 144, 16, 16], [2432, 160, 16, 16], [2432, 176, 16, 16],\n    [2448, 128, 16, 16], [2448, 144, 16, 16], [2448, 160, 16, 16], [2448, 176, 16, 16],\n\n    [2496, 128, 16, 16], [2496, 144, 16, 16], [2496, 160, 16, 16], [2496, 176, 16, 16],\n    [2512, 144, 16, 16], [2512, 160, 16, 16], [2512, 176, 16, 16],\n    [2528, 160, 16, 16], [2528, 176, 16, 16],\n    [2544, 176, 16, 16],\n\n    [2912, 176, 16, 16],\n    [2928, 160, 16, 16], [2928, 176, 16, 16],\n    [2944, 144, 16, 16], [2944, 160, 16, 16], [2944, 176, 16, 16],\n    [2960, 128, 16, 16], [2960, 144, 16, 16], [2960, 160, 16, 16], [2960, 176, 16, 16],\n    [2976, 112, 16, 16], [2976, 128, 16, 16], [2976, 144, 16, 16], [2976, 160, 16, 16], [2976, 176, 16, 16],\n    [2992, 96, 16, 16], [2992, 112, 16, 16], [2992, 128, 16, 16], [2992, 144, 16, 16], [2992, 160, 16, 16], [2992, 176, 16, 16],\n    [3008, 80, 16, 16], [3008, 96, 16, 16], [3008, 112, 16, 16], [3008, 128, 16, 16], [3008, 144, 16, 16], [3008, 160, 16, 16], [3008, 176, 16, 16],\n    [3024, 64, 16, 16], [3024, 80, 16, 16], [3024, 96, 16, 16], [3024, 112, 16, 16], [3024, 128, 16, 16], [3024, 144, 16, 16], [3024, 160, 16, 16], [3024, 176, 16, 16],\n    [3040, 64, 16, 16], [3040, 80, 16, 16], [3040, 96, 16, 16], [3040, 112, 16, 16], [3040, 128, 16, 16], [3040, 144, 16, 16], [3040, 160, 16, 16], [3040, 176, 16, 16],\n  ],\n\n  shrubs: [\n    [183, 176, 54, 16],\n    [375, 176, 32, 16],\n    [663, 176, 32, 16],\n    [951, 176, 32, 16],\n    [1143, 176, 32, 16],\n    [1447, 176, 32, 16],\n    [1735, 176, 32, 16],\n    [1927, 176, 32, 16],\n    [2224, 176, 32, 16],\n    [2695, 176, 32, 16],\n  ],\n\n  mountains: [\n    [255, 172, 48, 19],\n    [767, 157, 80, 35],\n    [1023, 172, 49, 20],\n    [1551, 157, 82, 35],\n    [1807, 172, 50, 20],\n    [2320, 157, 80, 35],\n    [2575, 172, 50, 20],\n    [3087, 157, 81, 35],\n    [3359, 157, 81, 35],\n  ],\n\n  pipes: [\n    [3568, 128, 32, 64], [3536, 160, 32, 32], [2880, 160, 32, 32],\n    [2624, 160, 32, 32], [448, 160, 32, 32], [608, 144, 32, 48],\n    [736, 128, 32, 64], [912, 128, 32, 64],\n  ],\n\n  coins: [\n    [256, 128, 16, 16], [336, 128, 16, 16],\n  ],\n\n  mushrooms: [\n    [336, 128, 16, 16], [1760, 64, 16, 16],\n  ],\n\n  breakables: [\n    [384, 128, 16, 16], [352, 128, 16, 16], [320, 128, 16, 16], [2752, 128, 16, 16],\n    [2720, 128, 16, 16], [2704, 128, 16, 16], [2096, 128, 16, 16], [2080, 128, 16, 16],\n    [2064, 64, 16, 16], [2112, 64, 16, 16], [1952, 64, 16, 16], [1968, 64, 16, 16],\n    [1984, 64, 16, 16], [1632, 128, 16, 16], [1616, 128, 16, 16], [1504, 64, 16, 16],\n    [1488, 64, 16, 16], [1472, 64, 16, 16], [1520, 128, 16, 16], [1408, 64, 16, 16],\n    [1392, 64, 16, 16], [1376, 64, 16, 16], [1360, 64, 16, 16], [1344, 64, 16, 16],\n    [1328, 64, 16, 16], [1312, 64, 16, 16], [1296, 64, 16, 16], [1280, 128, 16, 16],\n    [1248, 128, 16, 16], [1904, 128, 16, 16],\n  ],\n};\n\nexport { levelOne as default };\n","import * as Scenery from '../entities/scenery';\nimport Block from '../entities/block';\nimport Breakable from '../entities/breakable';\n\nexport default class MapBuilder {\n  constructor(level, tileset, spriteSheet) {\n    this.level = level;\n    this.tileset = tileset;\n    this.spriteSheet = spriteSheet;\n\n    this.mountainSheet = new Image();\n    this.mountainSheet.src = './assets/sprites/mountain.png';\n    this.cloudsSheet = new Image();\n    this.cloudsSheet.src = './assets/sprites/clouds.png';\n    this.castleSheet = new Image();\n    this.castleSheet.src = './assets/sprites/castle.png';\n\n    this.sceneryEntities = [];\n    this.brickEntities = [];\n    this.breakableEntities = [];\n    this.blockEntities = [];\n\n    // Create all entities in the map\n    level.ground.forEach((ground) => {\n      this.sceneryEntities.push(\n        new Scenery.Ground(this.tileset, ground[0], ground[1], ground[2], ground[3]),\n      );\n    });\n\n    level.shrubs.forEach((shrub) => {\n      this.sceneryEntities.push(\n        new Scenery.Shrub(this.tileset, shrub[0], shrub[1], shrub[2], shrub[3]),\n      );\n    });\n\n    level.mountains.forEach((mountain) => {\n      this.sceneryEntities.push(\n        new Scenery.Mountain(\n          this.mountainSheet, mountain[0], mountain[1], mountain[2], mountain[3]),\n      );\n    });\n\n    level.pipes.forEach((pipe) => {\n      this.sceneryEntities.push(\n        new Scenery.Pipe(this.tileset, pipe[0], pipe[1], pipe[2], pipe[3]),\n      );\n    });\n\n    level.smallClouds.forEach((smallCloud) => {\n      this.sceneryEntities.push(\n        new Scenery.SmallCloud(\n          this.cloudsSheet, smallCloud[0], smallCloud[1], smallCloud[2], smallCloud[3],\n      ));\n    });\n\n    level.mediumClouds.forEach((mediumCloud) => {\n      this.sceneryEntities.push(\n        new Scenery.MediumCloud(\n          this.cloudsSheet, mediumCloud[0], mediumCloud[1], mediumCloud[2], mediumCloud[3],\n      ));\n    });\n\n    level.largeClouds.forEach((largeCloud) => {\n      this.sceneryEntities.push(\n        new Scenery.LargeCloud(\n          this.cloudsSheet, largeCloud[0], largeCloud[1], largeCloud[2], largeCloud[3],\n      ));\n    });\n\n    level.blocks.forEach((block) => {\n      this.blockEntities.push(\n        new Block('coin', this.tileset, block[0], block[1], block[2], block[3]),\n      );\n    });\n\n    level.mushrooms.forEach((block) => {\n      this.blockEntities.push(\n        new Block('mushroom', this.tileset, block[0], block[1], block[2], block[3]),\n      );\n    });\n\n    level.breakables.forEach((breakable) => {\n      this.breakableEntities.push(\n        new Breakable(this.tileset, breakable[0], breakable[1], breakable[2], breakable[3]),\n      );\n    });\n\n    level.bricks.forEach((brick) => {\n      this.sceneryEntities.push(\n        new Scenery.Brick(this.tileset, brick[0], brick[1], brick[2], brick[3]));\n    });\n\n    this.sceneryEntities.push(\n      new Scenery.Flag(this.tileset, level.flag[0], level.flag[1], level.flag[2], level.flag[3]),\n    );\n\n    this.sceneryEntities.push(\n      new Scenery.Flagpole(\n        this.tileset, level.flagpole[0], level.flagpole[1], level.flagpole[2], level.flagpole[3]),\n    );\n\n    this.sceneryEntities.push(\n      new Scenery.Castle(\n        this.castleSheet, level.castle[0], level.castle[1], level.castle[2], level.castle[3]),\n    );\n  }\n\n  create(data) {\n    this.sceneryEntities.forEach((scene) => {\n      data.entities.scenery.push(scene);\n    });\n\n    this.breakableEntities.forEach((breakable) => {\n      data.entities.scenery.push(breakable);\n    });\n\n    this.blockEntities.forEach((block) => {\n      data.entities.scenery.push(block);\n    });\n  }\n\n  renderMap(data) {\n    this.sceneryEntities.forEach((scene) => {\n      this.drawEntity(scene, data);\n    });\n\n    this.brickEntities.forEach((brick) => {\n      this.drawEntity(brick, data);\n    });\n\n    this.breakableEntities.forEach((breakable) => {\n      this.drawEntity(breakable, data);\n    });\n\n    this.blockEntities.forEach((block) => {\n      this.drawEntity(block, data);\n    });\n  }\n\n  // Only draw entity when in Viewport\n  drawEntity(entity, data) {\n    const ctx = data.canvas.ctx;\n    const viewport = data.viewport;\n\n    if (((entity.xPos + entity.width >= viewport.vX &&\n      entity.xPos + entity.width <= viewport.vX + viewport.width)) &&\n      ((entity.yPos + entity.height >= viewport.vY &&\n        entity.yPos + entity.height <= viewport.vY + viewport.height))) {\n      ctx.drawImage(\n        entity.sprite.img,\n        entity.sprite.srcX, entity.sprite.srcY,\n        entity.sprite.srcW, entity.sprite.srcH,\n        entity.xPos - viewport.vX, entity.yPos - viewport.vY,\n        entity.width, entity.height,\n      );\n    }\n  }\n}\n","const animation = {\n  update(data) {\n    data.entities.mario.currentState.animation(data);\n\n    data.entities.coins.forEach((coin) => {\n      coin.currentState.animation(data);\n    });\n\n    data.entities.mushrooms.forEach((mushroom) => {\n      mushroom.currentState.animation(data);\n    });\n\n    data.entities.goombas.forEach((goomba) => {\n      goomba.currentState.animation(data);\n    });\n\n    data.entities.koopas.forEach((koopa) => {\n      koopa.currentState.animation(data);\n    });\n  },\n};\n\nexport { animation as default };\n","const input = {\n  down: {},\n  pressed: {},\n\n  init() {\n    $(window).on('keydown', (event) => {\n      this.down[event.keyCode] = true;\n    });\n\n    $(window).on('keyup', () => {\n      delete this.down[event.keyCode];\n      delete this.pressed[event.keyCode];\n    });\n  },\n\n  update(data) {\n    const mario = data.entities.mario;\n\n    if (data.userControl) {\n      // Move Left. Left-Arrow or A\n      if (this.isDown(37) || this.isDown(65)) {\n        if (mario.velY === 1.2) {\n          if (mario.bigMario) {\n            mario.currentState = mario.states.bigWalking;\n          } else {\n            mario.currentState = mario.states.walking;\n          }\n        } else {\n          mario.xPos -= mario.velX;\n        }\n        mario.direction = 'left';\n      }\n      // Move Right. Right-Arrow or D\n      if (this.isDown(39) || this.isDown(68)) {\n        if (mario.velY === 1.2) {\n          if (mario.bigMario) {\n            mario.currentState = mario.states.bigWalking;\n          } else {\n            mario.currentState = mario.states.walking;\n          }\n        } else {\n          mario.xPos += mario.velX;\n        }\n        mario.direction = 'right';\n      }\n\n      // Jump. Up-Arrow, W, or Spacebar\n      if (this.isPressed(38) || this.isPressed(32) || this.isPressed(87)) {\n        if (mario.bigMario) {\n          mario.currentState = mario.states.bigJumping;\n        } else {\n          mario.currentState = mario.states.jumping;\n        }\n      }\n    } else {\n      mario.currentState = mario.states.dead;\n    }\n  },\n\n  isDown(code) {\n    return this.down[code];\n  },\n\n  isPressed(code) {\n    if (this.pressed[code]) {\n      return false;\n    } else if (this.down[code]) {\n      this.pressed[code] = true;\n      return this.pressed[code];\n    }\n  },\n};\n\nexport { input as default };\n","const movement = {\n  update(data) {\n    data.entities.mario.currentState.movement(data);\n\n    data.entities.mushrooms.forEach((mushroom) => {\n      mushroom.currentState.movement(data);\n    });\n\n    data.entities.goombas.forEach((goomba) => {\n      goomba.currentState.movement(data);\n    });\n\n    data.entities.koopas.forEach((goomba) => {\n      goomba.currentState.movement(data);\n    });\n  },\n};\n\nexport { movement as default };\n","const physics = {\n  update(data) {\n    // detect entity collisions\n    this.collisionDetection(data);\n    this.sceneryCollisionDetection(data);\n    this.marioFallingCheck(data);\n\n    // apply gravity to all entities\n    this.gravity(data.entities.mario);\n\n    data.entities.mushrooms.forEach((mushroom) => {\n      this.gravity(mushroom);\n    });\n\n    data.entities.goombas.forEach((goomba) => {\n      this.gravity(goomba);\n    });\n\n    data.entities.koopas.forEach((koopa) => {\n      this.gravity(koopa);\n    });\n  },\n\n  collisionDetection(data) {\n    const collidables = [\n      data.entities.coins,\n      data.entities.mushrooms,\n      data.entities.goombas,\n      data.entities.koopas,\n    ];\n\n    const entityCollisionCheck = (entity) => {\n      if (data.entities.mario.xPos < entity.xPos + entity.width &&\n        data.entities.mario.xPos + data.entities.mario.width > entity.xPos &&\n        data.entities.mario.yPos < entity.yPos + entity.height &&\n        data.entities.mario.height + data.entities.mario.yPos > entity.yPos) {\n        // Collision Occured\n        this.handleCollision(data, entity);\n      }\n    };\n\n    collidables.forEach(entities =>\n      entities.forEach((entity) => { entityCollisionCheck(entity); }),\n    );\n    // this.enemyCollisions(data);\n  },\n\n  // enemyCollisions(data) {\n  //   const goombas = data.entities.goombas;\n  //   const koopas = data.entities.koopas;\n  //\n  //   const checkCollisions = (entityOne, entityTwo) => {\n  //     if ((entityOne.xPos < entityTwo.xPos && entityOne.yPos >= entityTwo.yPos) ||\n  //         (entityOne.xPos > entityTwo.xPos && entityOne.yPos >= entityTwo.yPos)) {\n  //           console.log('collision');\n  //       // E1 Sliding Koopa\n  //       if (entityOne.type === 'koopa' && entityOne.currentState === entityOne.states.sliding) {\n  //         if (entityTwo.type === 'koopa' && entityOne.currentState === entityOne.states.sliding) {\n  //           this.koopaDeath(entityOne, data);\n  //           this.koopaDeath(entityTwo, data);\n  //         } else {\n  //           this.enemyDeath(entityTwo, data); // write single method for both\n  //         } // E2 Sliding Koopa\n  //       } else if (entityTwo.type === 'koopa' && entityTwo.currentState === entityTwo.states.sliding) {\n  //         this.enemyDeath(entityOne, data);\n  //       } else {\n  //         entityOne.direction = entityOne.direction === 'left' ? 'right' : 'left';\n  //         entityTwo.direction = entityTwo.direction === 'left' ? 'right' : 'left';\n  //       }\n  //     }\n  //\n  //     goombas.forEach(goomba => {\n  //       koopas.forEach(koopa => {\n  //         checkCollisions(goomba, koopa);\n  //       });\n  //     });\n  //\n  //     goombas.forEach(goombaOne => {\n  //       goombas.forEach(goombaTwo => {\n  //         checkCollisions(goombaOne, goombaTwo);\n  //       });\n  //     });\n  //\n  //     koopas.forEach(koopaOne => {\n  //       koopas.forEach(koopaTwo => {\n  //         checkCollisions(koopaOne, koopaTwo);\n  //       });\n  //     });\n  //   };\n  // },\n\n  handleCollision(data, entity) {\n    const mario = data.entities.mario;\n\n    if ((entity.type === 'goomba' ||\n      entity.type === 'koopa') &&\n      mario.type !== 'invincible') {\n      // mario's right\n      if (mario.xPos < entity.xPos && mario.velY <= entity.velY) {\n        mario.xPos = entity.xPos - mario.width;\n        // slide shell instead of death\n        if (entity.type === 'koopa' &&\n          entity.currentState === entity.states.hiding) {\n          entity.direction = 'right';\n          entity.xPos += 5;\n\n          setTimeout(() => {\n            entity.currentState = entity.states.sliding;\n          }, 50);\n        } else {\n          if (mario.bigMario) {\n            this.marioShrink(mario);\n          } else {\n            mario.currentState = mario.states.dead;\n            this.marioDeath(data);\n          }\n        }\n      }\n      // mario's left\n      if (mario.xPos > entity.xPos && mario.velY <= entity.velY) {\n        mario.xPos = entity.xPos + mario.width;\n\n        if (entity.type === 'koopa' &&\n          entity.currentState === entity.states.hiding) {\n          entity.direction = 'left';\n          entity.xPos -= 5;\n\n          setTimeout(() => {\n            entity.currentState = entity.states.sliding;\n          }, 50);\n        } else {\n          if (mario.bigMario) {\n            this.marioShrink(mario);\n          } else {\n            mario.currentState = mario.states.dead;\n            this.marioDeath(data);\n          }\n        }\n      }\n      //  Mario bot\n      if (mario.yPos < entity.yPos &&\n        (mario.xPos + mario.width) > entity.xPos &&\n        mario.xPos < (entity.xPos + entity.width) &&\n        mario.velY >= entity.velY) {\n        mario.currentState = mario.states.standing;\n        mario.yPos = entity.yPos - mario.height;\n        mario.velY = 0;\n\n        if (entity.type === 'goomba') {\n          this.enemyDeath(entity, data);\n        } else if (entity.type === 'koopa') {\n          if (entity.currentState === entity.states.hiding) {\n            this.koopaSlide(entity);\n          } else if (entity.currentState === entity.states.sliding) {\n            this.enemyDeath(entity, data);\n          } else {\n            this.koopaHide(entity);\n          }\n        }\n\n        if (mario.yPos > entity.yPos &&\n          (mario.xPos + mario.width) >= entity.xPos &&\n          mario.xPos < (entity.xPos + entity.width)) {\n          mario.velY = 1.2;\n          mario.xPos = entity.xPos;\n          if (mario.bigMario) {\n            this.marioShrink(mario);\n          } else {\n            mario.currentState = mario.states.dead;\n            this.marioDeath(data);\n          }\n        }\n      }\n    }\n\n    if (entity.type === 'mushroom') {\n      mario.bigMario = true;\n      mario.height = 32;\n      mario.powerupSound.play();\n\n      const index = data.entities.mushrooms.indexOf(entity);\n      delete data.entities.mushrooms[index];\n    }\n\n    if (entity.type === 'coin') {\n      data.entities.score.value += 50;\n      data.entities.score.coinCount += 1;\n      entity.coinSound.play();\n\n      const index = data.entities.coins.indexOf(entity);\n      delete data.entities.coins[index];\n    }\n  },\n\n  marioFallingCheck(data) {\n    if (data.entities.mario.yPos >= 210) {\n      data.entities.mario.deathSound.play();\n      data.userControl = false;\n\n      setTimeout(() => {\n        data.reset();\n      }, 3000);\n    }\n  },\n\n  marioDeath(data) {\n    data.userControl = false;\n    data.sounds.backgroundMusic.pause();\n    data.entities.mario.deathSound.play();\n\n    setTimeout(() => {\n      data.entities.mario.height = 16;\n      data.entities.mario.type = 'dead';\n      data.entities.mario.velY -= 13;\n    }, 500);\n\n    setTimeout(() => {\n      data.reset();\n    }, 3000);\n  },\n  // freeze one sec while resize. return to movement\n  marioShrink(mario) {\n    mario.bigMario = false;\n    mario.powerdownSound.play();\n    mario.type = 'invincible';\n    mario.currentState = mario.states.resizing;\n\n    setTimeout(() => {\n      mario.currentState = mario.states.standing;\n      mario.height = 16;\n    }, 1000);\n\n    setTimeout(() => {\n      mario.type = 'mario';\n    }, 1500);\n  },\n\n  koopaHide(entity) {\n    entity.type = 'invulnerable';\n    entity.currentState = entity.states.hiding; // koopa stomp\n\n    setTimeout(() => {\n      entity.type = 'koopa';\n    }, 200);\n  },\n\n  koopaSlide(entity) {\n    entity.type = 'invulnerable';\n    entity.currentState = entity.states.sliding;\n\n    setTimeout(() => {\n      entity.type = 'koopa';\n    }, 200);\n  },\n\n  enemyDeath(entity, data) {\n    if (entity.type === 'goomba') {\n      data.entities.score.value += 100;\n      entity.currentState = entity.states.dead;\n      entity.type = 'dying';\n      entity.squishSound.play();\n\n      setTimeout(() => {\n        const index = data.entities.goombas.indexOf(entity);\n        delete data.entities.goombas[index];\n      }, 800);\n    } else {\n      data.entities.score.value += 100;\n      entity.velY -= 10;\n      entity.type = 'dead';\n\n      setTimeout(() => {\n        const index = data.entities.koopas.indexOf(entity);\n        delete data.entities.koopas[index];\n      }, 400);\n    }\n  },\n\n  levelFinish(data) {\n    data.entities.mario.velX = 0;\n    data.entities.mario.velY = 0;\n    data.entities.mario.xPos += 3;\n\n    data.sounds.backgroundMusic.pause();\n    data.sounds.levelFinish.play();\n\n    setTimeout(() => {\n      data.reset();\n    }, 6000);\n  },\n\n  sceneryCollisionDetection(data) {\n    this.sceneryCollisionCheck(data, [data.entities.mario], data.entities.scenery);\n    this.sceneryCollisionCheck(data, data.entities.mushrooms, data.entities.scenery);\n    this.sceneryCollisionCheck(data, data.entities.goombas, data.entities.scenery);\n    this.sceneryCollisionCheck(data, data.entities.koopas, data.entities.scenery);\n  },\n\n  sceneryCollisionCheck(data, entities, scenery) {\n    entities.forEach((entity) => {\n      scenery.forEach((scene) => {\n        if (entity.xPos < scene.xPos + scene.width &&\n          entity.xPos + entity.width > scene.xPos &&\n          entity.yPos < scene.yPos + scene.height &&\n          entity.height + entity.yPos > scene.yPos) {\n          // Collision Occured\n          if (scene.type === 'flag') {\n            this.levelFinish(data);\n          } else if (scene.type !== 'shrub' &&\n            scene.type !== 'cloud' &&\n            scene.type !== 'mountain') {\n            this.sceneryCollision(data, entity, scene);\n          }\n        }\n      });\n    });\n  },\n\n  sceneryCollision(data, entity, scene) {\n    // Left side\n    if (entity.xPos < scene.xPos && entity.yPos >= scene.yPos) {\n      if (scene.type === 'pipe' || scene.type === 'brick') {\n        entity.xPos = scene.xPos - entity.width - 1;\n      } else {\n        entity.xPos = scene.xPos - entity.width;\n      }\n\n      if ((entity.type === 'goomba') ||\n        (entity.type === 'koopa') ||\n        (entity.type === 'mushroom')) {\n        entity.direction = entity.direction === 'left' ? 'right' : 'left';\n      }\n    }\n    // Right side\n    if (entity.xPos > scene.xPos && entity.yPos >= scene.yPos) {\n      entity.xPos = scene.xPos + scene.width;\n\n      if ((entity.type === 'goomba') ||\n        (entity.type === 'koopa') ||\n        (entity.type === 'mushroom')) {\n        entity.direction = entity.direction === 'left' ? 'right' : 'left';\n      }\n    }\n    // Top\n    if (entity.yPos < scene.yPos &&\n      (entity.xPos + entity.width) > scene.xPos &&\n      entity.xPos < (scene.xPos + scene.width) && entity.velY >= 0) {\n\n      if (entity.type !== 'dead') { // fall through ground when dead\n        if (entity.type === 'mario') {\n          if (entity.bigMario) {\n            entity.currentState = entity.states.bigStanding;\n          } else {\n            entity.currentState = entity.states.standing;\n          }\n        }\n        entity.yPos = scene.yPos - entity.height - 1;\n        entity.velY = 0;\n      }\n    }\n    // Bot\n    if (entity.yPos >= scene.yPos &&\n      (entity.xPos + entity.width) >= scene.xPos &&\n      entity.xPos < (scene.xPos + scene.width) && entity.velY < 0) {\n      if (scene.type === 'block') {\n        if (scene.contents === 'coin') {\n          scene.collectCoin(data);\n        } else if (scene.contents === 'mushroom') {\n          scene.createMushroom(data);\n        }\n        scene.sprite = scene.used;\n      } else if (scene.type === 'breakable') {\n        if (entity.bigMario) {\n          data.sounds.breakSound.play();\n          scene.type = 'shrub';\n          const index = data.mapBuilder.breakableEntities.indexOf(scene);\n          delete data.mapBuilder.breakableEntities[index];\n        } else {\n          entity.bumpSound.play();\n        }\n      }\n      entity.yPos = entity.yPos + entity.height;\n      entity.xPos = scene.xPos;\n      entity.velY = 1.2;\n    }\n  },\n\n  gravity(entity) {\n    entity.velY += 1.2;\n    entity.yPos += entity.velY;\n  },\n};\n\nexport { physics as default };\n","const render = {\n  init(data) {\n    data.entities.scenery = [];\n    data.mapBuilder.create(data);\n  },\n\n  // Clear canvas and redraw entities\n  update(data) {\n    data.canvas.ctx.clearRect(0, 0, 760, 600);\n    data.canvas.ctx.fillStyle = '#63adff';\n    data.canvas.ctx.fillRect(0, 0, 760, 600);\n\n    data.mapBuilder.renderMap(data);\n\n    data.entities.coins.forEach((coin) => {\n      this.drawEntity(coin, data);\n    });\n\n    data.entities.mushrooms.forEach((mushroom) => {\n      this.drawEntity(mushroom, data);\n    });\n\n    data.entities.goombas.forEach((goomba) => {\n      this.drawEntity(goomba, data);\n    });\n\n    data.entities.koopas.forEach((koopa) => {\n      this.drawEntity(koopa, data);\n    });\n\n    this.drawText(data);\n    this.drawEntity(data.entities.mario, data);\n  },\n\n  // Only draw entities that fall in viewport\n  drawEntity(entity, data) {\n    if (((entity.xPos + entity.width >= data.viewport.vX &&\n          entity.xPos + entity.width <= data.viewport.vX + data.viewport.width)) &&\n        ((entity.yPos + entity.height >= data.viewport.vY &&\n          entity.yPos + entity.height <= data.viewport.vY + data.viewport.height))) {\n      data.canvas.ctx.drawImage(\n        entity.sprite.img,\n        entity.sprite.srcX, entity.sprite.srcY,\n        entity.sprite.srcW, entity.sprite.srcH,\n        entity.xPos - data.viewport.vX, entity.yPos - data.viewport.vY,\n        entity.width, entity.height,\n      );\n    }\n  },\n\n  // Render hud\n  drawText(data) {\n    const text = data.entities.score;\n\n    data.canvas.ctx.font = `${text.size} ${text.font}`;\n    data.canvas.ctx.fillStyle = text.color;\n    data.canvas.ctx.fillText(\n      `Score: ${text.value}`, text.xPos - (data.viewport.width / 3), text.yPos,\n    );\n  },\n};\n\nexport { render as default };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import render from './util/render';\nimport input from './util/input';\nimport animation from './util/animation';\nimport movement from './util/movement';\nimport physics from './util/physics';\n\nimport { levelOne } from './map/level_1-1';\nimport MapBuilder from './map/map_builder';\n\nimport Mario from './entities/mario';\nimport Goomba from './entities/goomba';\nimport Koopa from './entities/koopa';\nimport Score from './entities/score';\n\n// todos: animate blocks. mario duck/run. enemy collisions\n\nclass Game {\n  init() {\n    const canvasEl = document.getElementById('game-canvas');\n    const ctx = canvasEl.getContext('2d');\n    ctx.scale(3, 3);\n\n    const canvas = {\n      canvas: canvasEl,\n      ctx,\n    };\n\n    const viewport = {\n      width: 760,\n      height: 600,\n      vX: 0,\n      vY: 0,\n    };\n\n    const backgroundMusic = document.getElementById('background_music');\n\n    // Add mute button\n    this.muted = false;\n\n    document.getElementById('mute-button').addEventListener('click', (e) => {\n      backgroundMusic.muted = !backgroundMusic.muted;\n      if (this.muted) {\n        this.muted = false;\n        e.target.className = '';\n      } else {\n        this.muted = true;\n        e.target.className += 'muted';\n      }\n      e.preventDefault();\n    }, false);\n\n    const spriteSheet = new Image();\n    spriteSheet.src = './assets/sprites/spritesheet.png';\n\n    const tileset = new Image();\n    tileset.src = './assets/sprites/tileset_gutter.png';\n\n    spriteSheet.addEventListener('load', () => {\n      const data = {\n        spriteSheet,\n        canvas,\n        viewport,\n        animationFrame: 0,\n        mapBuilder: new MapBuilder(levelOne, tileset, spriteSheet),\n        entities: {},\n        sounds: {\n          backgroundMusic,\n          breakSound: new Audio('./assets/audio/sounds/break_block.wav'),\n          levelFinish: new Audio('./assets/audio/music/level_complete.mp3'),\n        },\n        userControl: true,\n        reset: this.reset,\n      };\n\n      const mario = new Mario(spriteSheet, 175, 0, 16, 16);\n      const score = new Score(270, 15);\n\n      input.init(data);\n      data.entities.mario = mario;\n      data.entities.score = score;\n      data.entities.coins = [];\n      data.entities.mushrooms = [];\n      data.entities.goombas = [];\n      data.entities.koopas = [];\n\n      // Load enemies from map\n      levelOne.koopas.forEach((koopa) => {\n        data.entities.koopas.push(\n          new Koopa(spriteSheet, koopa[0], koopa[1], koopa[2], koopa[3]));\n      });\n\n      levelOne.goombas.forEach((goomba) => {\n        data.entities.goombas.push(\n          new Goomba(spriteSheet, goomba[0], goomba[1], goomba[2], goomba[3]));\n      });\n\n      render.init(data);\n      this.run(data);\n    });\n  }\n\n  run(data) {\n    const loop = () => {\n      input.update(data);\n      animation.update(data);\n      movement.update(data);\n      physics.update(data);\n\n      Game.updateView(data);\n      render.update(data);\n\n      data.animationFrame += 1;\n      window.requestAnimationFrame(loop);\n    };\n\n    loop();\n  }\n\n  // Update viewport to follow Mario\n  static updateView(data) {\n    const viewport = data.viewport;\n    const margin = viewport.width / 6;\n    const center = {\n      x: data.entities.mario.xPos + (data.entities.mario.width * 0.5),\n      y: data.entities.mario.yPos + (data.entities.mario.height * 0.5),\n    };\n\n    if (center.x < viewport.vX + (margin * 2)) {\n      viewport.vX = Math.max(center.x - margin, 0);\n    } else if (center.x > (viewport.vX + viewport.width) - (margin * 2)) {\n      viewport.vX = Math.min((center.x + margin) - viewport.width, 3400 - viewport.width);\n    }\n  }\n\n  reset() {\n    location.reload();\n  }\n}\n\nconst game = new Game();\ngame.init();\n"],"names":[],"sourceRoot":""}